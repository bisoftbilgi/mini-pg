package com.bisoft.minipg.service.pgwireprotocol.server;

import com.bisoft.minipg.service.SessionState;
import com.bisoft.minipg.service.pgwireprotocol.Util;
import com.bisoft.minipg.service.pgwireprotocol.server.response.ErrorResponse;
import java.util.Arrays;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@Scope("prototype")
@Lazy
public class PasswordPacket extends AbstractWireProtocolPacket {

    @Autowired
    Md5Authenticator authenticator;

    private SessionState sessionState;

    private static final byte[] AUTH_OK_BYTES                = new byte[]{0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x53,
        0x00, 0x00, 0x00, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
        0x6d, 0x65, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
        0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x55, 0x54, 0x46, 0x38, 0x00, 0x53, 0x00, 0x00, 0x00, 0x17, 0x44,
        0x61, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x00, 0x49, 0x53, 0x4f, 0x2c, 0x20, 0x4d, 0x44, 0x59, 0x00,
        0x53, 0x00, 0x00, 0x00, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74,
        0x69, 0x6d, 0x65, 0x73, 0x00, 0x6f, 0x6e, 0x00, 0x53, 0x00, 0x00, 0x00, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72,
        0x76, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x00, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x00,
        0x53, 0x00, 0x00, 0x00, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x00,
        0x6f, 0x6e, 0x00, 0x53, 0x00, 0x00, 0x00, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63,
        0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x55, 0x54, 0x46, 0x38, 0x00, 0x53, 0x00, 0x00, 0x00, 0x31, 0x73, 0x65,
        0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x31, 0x30, 0x2e, 0x37, 0x20,
        0x28, 0x44, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x20, 0x31, 0x30, 0x2e, 0x37, 0x2d, 0x31, 0x2e, 0x70, 0x67, 0x64,
        0x67, 0x39, 0x30, 0x2b, 0x31, 0x29, 0x00, 0x53, 0x00, 0x00, 0x00, 0x23, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
        0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x70, 0x6f,
        0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x00, 0x53, 0x00, 0x00, 0x00, 0x23, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
        0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69,
        0x6e, 0x67, 0x73, 0x00, 0x6f, 0x6e, 0x00, 0x53, 0x00, 0x00, 0x00, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
        0x6e, 0x65, 0x00, 0x55, 0x54, 0x43, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5d, 0x0f, 0x3a,
        (byte) 0x82, 0x64, 0x5a, 0x00, 0x00, 0x00, 0x05, 0x49};
    private static final int    LENGTH_OF_TRAILING_ZERO_BYTE = 1;
    private              byte[] hashBytes;

    public WireProtocolPacket decode(byte[] buffer) {
        // 0000 70 00 00 00 28 6d 64 35 64 31 65 61 65 64 31 31
        // p . . . ( m d 5 d 1eaed11

        int packetLength = buffer.length;
        hashBytes = Util.readByteArray(buffer, 5,
            packetLength - LENGTH_OF_CHARACTER_TAG_AND_LENGTH_FIELD - LENGTH_OF_TRAILING_ZERO_BYTE);
        String hashStr = new String(hashBytes);
        log.trace("PasswordPacket hash : {}", hashStr);
        return this;
    }

    @Override
    public String toString() {

        return "[PasswordPacket:" + Arrays.toString(hashBytes) + "]";
    }

    @Override
    public byte[] response() {

        if (isAuthenticated()) {
            return AUTH_OK_BYTES;
        }
        return ErrorResponse.generateErrorResponse("ERROR", "22000", "Mini-pg : Authentication Failed");
    }

    public boolean isAuthenticated() {

        return authenticator.authenticate(hashBytes, sessionState.getSalt());
    }

    public void setSessionState(SessionState sessionState) {

        this.sessionState = sessionState;
    }

    public static boolean packetMatches(byte[] buffer) {

        return buffer.length > 8 && buffer[0] == 112 && buffer[4] == 40 && buffer[5] == 109 && buffer[6] == 100
            && buffer[7] == 53;
    }
}
